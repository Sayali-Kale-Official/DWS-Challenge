package com.dws.challenge.service;

import com.dws.challenge.domain.Account;
import com.dws.challenge.repository.AccountsRepository;

import java.math.BigDecimal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AccountsService {

  
  private final AccountsRepository accountsRepository;
  private final NotificationService notificationService;  // Inject NotificationService


  @Autowired
  public AccountsService(AccountsRepository accountsRepository, NotificationService notificationService) {
    this.accountsRepository = accountsRepository;
    this.notificationService = notificationService;
  }

  public void createAccount(Account account) {
    this.accountsRepository.createAccount(account);
  }

  public Account getAccount(String accountId) {
    return this.accountsRepository.getAccount(accountId);
  }
  
  public void transferMoney(String fromAccountId, String toAccountId, BigDecimal amount) {
	    if (amount.compareTo(BigDecimal.ZERO) <= 0) {
	      throw new IllegalArgumentException("Transfer amount must be positive.");
	    }

	    Account accountFrom = accountsRepository.getAccount(fromAccountId);
	    Account accountTo = accountsRepository.getAccount(toAccountId);

	    synchronized (accountFrom) {
	      synchronized (accountTo) {
	    	// Perform the transfer
	        accountFrom.withdraw(amount);
	        accountTo.deposit(amount);
	      }
	    }
	    // Create the transfer description for the notification
	    
	    String transferDescriptionFrom = String.format("Transferred %s to account %s", amount, toAccountId);
        notificationService.notifyAboutTransfer(accountFrom, transferDescriptionFrom);

        String transferDescriptionTo = String.format("Transferred %s from account %s", amount, fromAccountId);
        notificationService.notifyAboutTransfer(accountTo, transferDescriptionTo);
	  }
}
