package com.dws.challenge;

@SpringBootTest
class AccountsServiceTest {

    @Mock
    private AccountsRepository accountsRepository;

    @Mock
    private NotificationService notificationService;

    @InjectMocks
    private AccountsService accountsService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void createAccount_success() {
        Account account = new Account("Id-1", BigDecimal.valueOf(1000));
        accountsService.createAccount(account);
        verify(accountsRepository, times(1)).createAccount(account);
    }

    @Test
    void getAccount_success() {
        Account account = new Account("Id-1", BigDecimal.valueOf(1000));
        when(accountsRepository.getAccount("Id-1")).thenReturn(account);

        Account retrievedAccount = accountsService.getAccount("Id-1");
        assertThat(retrievedAccount).isEqualTo(account);
        verify(accountsRepository, times(1)).getAccount("Id-1");
    }

    @Test
    void transferMoney_success() {
        Account accountFrom = new Account("Id-1", BigDecimal.valueOf(1000));
        Account accountTo = new Account("Id-2", BigDecimal.valueOf(500));

        when(accountsRepository.getAccount("Id-1")).thenReturn(accountFrom);
        when(accountsRepository.getAccount("Id-2")).thenReturn(accountTo);

        accountsService.transferMoney("Id-1", "Id-2", BigDecimal.valueOf(200));

        assertThat(accountFrom.getBalance()).isEqualByComparingTo("800");
        assertThat(accountTo.getBalance()).isEqualByComparingTo("700");

        verify(notificationService, times(1)).notifyAboutTransfer(accountFrom, "Transferred 200 to account Id-2");
        verify(notificationService, times(1)).notifyAboutTransfer(accountTo, "Received 200 from account Id-1");
    }

    @Test
    void transferMoney_insufficientBalance() {
        Account accountFrom = new Account("Id-1", BigDecimal.valueOf(100));
        Account accountTo = new Account("Id-2", BigDecimal.valueOf(500));

        when(accountsRepository.getAccount("Id-1")).thenReturn(accountFrom);
        when(accountsRepository.getAccount("Id-2")).thenReturn(accountTo);

        assertThrows(IllegalArgumentException.class, () ->
                accountsService.transferMoney("Id-1", "Id-2", BigDecimal.valueOf(200))
        );

        assertThat(accountFrom.getBalance()).isEqualByComparingTo("100");
        assertThat(accountTo.getBalance()).isEqualByComparingTo("500");

        verify(notificationService, never()).notifyAboutTransfer(any(), any());
    }

    @Test
    void withdraw_success() {
        Account account = new Account("Id-1", BigDecimal.valueOf(1000));

        accountsService.withdraw(account, BigDecimal.valueOf(300));

        assertThat(account.getBalance()).isEqualByComparingTo("700");
    }

    @Test
    void withdraw_insufficientBalance() {
        Account account = new Account("Id-1", BigDecimal.valueOf(100));

        assertThrows(IllegalArgumentException.class, () ->
                accountsService.withdraw(account, BigDecimal.valueOf(200))
        );

        assertThat(account.getBalance()).isEqualByComparingTo("100");
    }

    @Test
    void deposit_success() {
        Account account = new Account("Id-2", BigDecimal.valueOf(500));

        accountsService.deposit(account, BigDecimal.valueOf(200));

        assertThat(account.getBalance()).isEqualByComparingTo("700");
    }
}